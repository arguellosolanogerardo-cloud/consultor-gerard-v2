"""
Script de verificaci√≥n pre-despliegue para Streamlit Cloud
Ejecuta esto antes de desplegar para asegurar que todo est√© correcto
"""

import os
import sys
import json

def check_file_exists(filepath, description):
    """Verifica si un archivo existe"""
    exists = os.path.exists(filepath)
    status = "‚úÖ" if exists else "‚ùå"
    print(f"{status} {description}: {filepath}")
    return exists

def check_requirements():
    """Verifica el archivo requirements.txt"""
    print("\nüì¶ Verificando requirements.txt...")
    if not check_file_exists("requirements.txt", "Archivo requirements.txt"):
        return False

    try:
        with open("requirements.txt", "r", encoding="utf-8") as f:
            requirements = [line.strip() for line in f if line.strip() and not line.startswith("#")]
        print(f"‚úÖ Encontradas {len(requirements)} dependencias")
        return True
    except Exception as e:
        print(f"‚ùå Error leyendo requirements.txt: {e}")
        return False

def check_streamlit_config():
    """Verifica la configuraci√≥n de Streamlit"""
    print("\n‚öôÔ∏è Verificando configuraci√≥n de Streamlit...")
    config_path = ".streamlit/config.toml"
    if not check_file_exists(config_path, "Archivo .streamlit/config.toml"):
        return False

    try:
        import tomllib
        with open(config_path, "rb") as f:
            config = tomllib.load(f)
        print("‚úÖ Configuraci√≥n TOML v√°lida")

        # Verificar configuraciones importantes
        server_config = config.get("server", {})
        if server_config.get("headless") == True:
            print("‚úÖ Modo headless activado")
        else:
            print("‚ö†Ô∏è Modo headless no activado")

        return True
    except ImportError:
        print("‚ö†Ô∏è tomllib no disponible, saltando validaci√≥n TOML detallada")
        # Verificaci√≥n b√°sica: el archivo existe y tiene contenido
        try:
            with open(config_path, "r", encoding="utf-8") as f:
                content = f.read()
                if "[server]" in content and "headless = true" in content:
                    print("‚úÖ Configuraci√≥n b√°sica correcta (headless activado)")
                    return True
                else:
                    print("‚ö†Ô∏è Configuraci√≥n b√°sica podr√≠a tener problemas")
                    return False
        except Exception as e:
            print(f"‚ùå Error leyendo archivo de configuraci√≥n: {e}")
            return False
    except Exception as e:
        print(f"‚ö†Ô∏è Error en validaci√≥n TOML detallada: {e}")
        print("‚ö†Ô∏è Intentando validaci√≥n b√°sica...")
        # Verificaci√≥n b√°sica como fallback
        try:
            with open(config_path, "r", encoding="utf-8") as f:
                content = f.read()
                if "[server]" in content and "headless = true" in content:
                    print("‚úÖ Configuraci√≥n b√°sica correcta (headless activado)")
                    return True
                else:
                    print("‚ùå Configuraci√≥n b√°sica incorrecta")
                    return False
        except Exception as e2:
            print(f"‚ùå Error en validaci√≥n b√°sica: {e2}")
            return False

def check_main_app():
    """Verifica que la aplicaci√≥n principal exista y sea ejecutable"""
    print("\nüöÄ Verificando aplicaci√≥n principal...")
    main_files = ["consultar_web.py", "app.py", "main.py"]

    main_app = None
    for filename in main_files:
        if os.path.exists(filename):
            main_app = filename
            break

    if main_app:
        print(f"‚úÖ Aplicaci√≥n principal encontrada: {main_app}")
        return True
    else:
        print("‚ùå No se encontr√≥ aplicaci√≥n principal (consultar_web.py, app.py, o main.py)")
        return False

def check_secrets_template():
    """Verifica si existe plantilla de secrets"""
    print("\nüîê Verificando plantilla de secrets...")
    secrets_path = ".streamlit/secrets.toml"
    if check_file_exists(secrets_path, "Plantilla .streamlit/secrets.toml"):
        print("‚úÖ Plantilla de secrets disponible")
        return True
    else:
        print("‚ö†Ô∏è No hay plantilla de secrets (no es obligatorio)")
        return True

def check_git_status():
    """Verifica el estado de Git"""
    print("\nüìä Verificando estado de Git...")
    try:
        import subprocess
        result = subprocess.run(["git", "status", "--porcelain"], capture_output=True, text=True, cwd=".")
        if result.returncode == 0:
            if result.stdout.strip():
                print("‚ö†Ô∏è Hay cambios sin commitear:")
                print(result.stdout)
                return False
            else:
                print("‚úÖ Repositorio limpio, todos los cambios commiteados")
                return True
        else:
            print("‚ùå Error ejecutando git status")
            return False
    except Exception as e:
        print(f"‚ùå Error verificando Git: {e}")
        return False

def main():
    """Funci√≥n principal de verificaci√≥n"""
    print("üîç VERIFICACI√ìN PRE-DESPLIEGUE PARA STREAMLIT CLOUD")
    print("=" * 60)

    checks = [
        check_requirements,
        check_streamlit_config,
        check_main_app,
        check_secrets_template,
        check_git_status
    ]

    results = []
    for check in checks:
        results.append(check())

    print("\n" + "=" * 60)
    print("üìã RESUMEN DE VERIFICACI√ìN:")

    if all(results):
        print("‚úÖ TODOS LOS CHECKS PASARON - Listo para desplegar en Streamlit Cloud!")
        print("\nüìù Pr√≥ximos pasos:")
        print("1. Ve a https://share.streamlit.io/")
        print("2. Conecta tu cuenta de GitHub")
        print("3. Selecciona el repositorio: arguellosolanogerardo-cloud/consultor-gerard-v2")
        print("4. Archivo principal: consultar_web.py")
        print("5. Haz clic en 'Deploy'")
        print("\nüîó URL esperada: https://arguellosolanogerardo-cloud-consultor-gerard-v2.streamlit.app/")
    else:
        print("‚ùå Algunos checks fallaron - Revisa los errores arriba")

    print("\nüîê IMPORTANTE - Configurar Secrets en Streamlit Cloud:")
    print("- GOOGLE_API_KEY: Tu clave de Google AI Studio")
    print("- GOOGLE_CREDENTIALS: JSON de Service Account para Google Sheets")
    print("- SHEET_ID: ID de tu hoja de Google Sheets")

if __name__ == "__main__":
    main()